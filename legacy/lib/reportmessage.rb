require 'date'

# id,permalink,thread_id,date,ip,from,to,subject,body

class ReportMessage

  attr_reader :id, :recipient, :message_timestamp

  def self.report_message?(message, path)
    (message['subject'] == 'We Have Reviewed Your Report') and
    (message['body'].include?('submitting a report'))
  end
  

  def first_report?
    if @first_report == nil
      @first_report = @body.include?('already been investigated') ? 'no' : 'yes'
    end

    @first_report
  end
  

  def subreddit_is_account_profile?
    if @subreddit_is_account_profile == nil
      subname = subreddit

      @subreddit_is_account_profile = 'no'
      if (subname.start_with?('u_'))
        @subreddit_is_account_profile = 'yes'
      end
    end
  
    @subreddit_is_account_profile
  end
  

  def reported_account
    if @reported_account == nil
      @reported_account = 'unknown'
      #Reported account(s): Salty\-Essay721 
      #that the account(s) Plenty\_Cod2067 
      if (match = /Reported account\(s\): (.+)/.match(@body))
        @reported_account = match[1]
      elsif (match = /that the account\(s\) ([^ ]+)/.match(@body))
        @reported_account = match[1]
      end

      @reported_account.gsub!(/\\/, '')
      @reported_account.strip!
    end

    @reported_account
  end
  

  def report_timestamp
    if @report_timestamp == nil
      if (match = /Submitted on: (\d.+)/.match(@body))
        @report_timestamp = parse_timestamp(match[1])
      end
    end

    @report_timestamp
  end


  def reported_content_type
    if @reported_content_type == nil
      @reported_content_type = 'post'
      if (match = /comments\/[a-z0-9]+\/comment\//.match(@body))
        @reported_content_type = 'comment'
      end
    end

    @reported_content_type
  end

  
  def parse_timestamp(date_string)
    ret = 0

    # 2023-04-01 00:26:28 UTC
    if (/\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} .+/.match(date_string))
      date = DateTime.parse(date_string)
      ret = date.strftime('%s')
    # 03/22/2023 at 08:01 PM UTC
    elsif (match = /(\d{2})\/(\d{2})\/(\d{4}) at (\d{2}):(\d{2}) (.{2}) (.+)/.match(date_string))
      month = match[1]
      day = match[2]
      year = match[3]
      hour = am_pm_to_24(match[4], match[6])
      minute = match[5]
      second = '00'
      tz = match[7]

      date_string = "#{year}-#{month}-#{day} #{hour}:#{minute}:#{second} #{tz}"

      date = DateTime.parse(date_string)
      ret = date.strftime('%s')
    # 2025-05-03T07:04:35Z
    elsif (match = /(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z/.match(date_string))
      year = match[1]
      month = match[2]
      day = match[3]
      hour = match[4]
      minute = match[5]
      second = match[6]
      tz = match[7]

      date_string = "#{year}-#{month}-#{day} #{hour}:#{minute}:#{second} #{tz}"

      date = DateTime.parse(date_string)
      ret = date.strftime('%s')
    end

    return ret
  end
  

  def am_pm_to_24(hour, ampm)
    hour_i = hour.to_i

    if (hour_i >= 1 and hour_i <= 11)
      if ampm == 'AM'
        ret = hour_i.to_s
      else
        ret = (hour_i + 12).to_s
      end
    else
      # hour_i == 12
      if ampm == 'AM'
        ret = '00'
      else
        ret = '12'
      end
    end
  end


  def violation?
    if @violation == nil
      @violation = 'no'
      if (@body.include?('violated'))
        @violation = 'yes'
      elsif (@body.include?('violates'))
        @violation = 'yes'
      elsif (@body.include?('t violate '))
        @violation = 'no'
      end
      @violation.strip!
    end

    @violation
  end
  

  def autogenerated_username?
    if @autogenerated_username == nil
      username = reported_account

      if (match = /([A-Z][a-z]+[_-]*){2}[0-9]{2,4}/.match(username))
        @autogenerated_username = 'yes'
      else
        @autogenerated_username = 'no'
      end
    end

    @autogenerated_username
  end
  

  def subreddit
    if @subreddit == nil
      @subreddit = 'unknown'
      # Link to reported content: https://www.reddit.com/r/wichsbros_DE69x/comments/159etsc
      if (match = /Link to reported content:.*\/r\/([^\/]+)\//.match(@body))
        @subreddit = match[1]
        @subreddit.strip!
      end
    end

    @subreddit
  end
  
  
  def violation_type
    ret = 'unknown'
  
    #Report reason: Non-consensual intimate media 
    if (match = /Report reason: (.+)/.match(@body))
      ret = match[1]
    end
  
    ret.strip!

    return ret
  end
  
  
  def user_action
    ret = 'unknown'
  
    if (match = /User ([^ ]+) was (.+)/.match(@body))
      ret = match[2]
    end

    ret.strip!

    return ret
  end
  

  def content_action
    ret = 'unknown'
  
    if (match = /reported content was (.+)/.match(@body))
      ret = match[1]
    end
  
    ret.strip!

    return ret
  end


  def self.timestamp_as_date(timestamp)
    #puts "Converting '#{timestamp}'"
    Time.at(timestamp.to_i).to_datetime.strftime('%F %T')
  end


  def self.format_processing_time(seconds)
    # https://stackoverflow.com/questions/2310197/how-to-convert-270921sec-into-days-hours-minutes-sec-ruby
    mm, ss = seconds.divmod(60)
    hh, mm = mm.divmod(60)
    dd, hh = hh.divmod(24)
        
    "#{dd} days, #{hh} hours, #{mm} minutes and #{ss.round} seconds"
  end


  def get_processing_time()
    start_timestamp = report_timestamp()
    end_timestamp = message_timestamp()
    
    seconds = end_timestamp - start_timestamp
    
    format_processing_time(seconds)
  end


  def initialize(message_fields, path)
    @path = path
    @version = if (path =~ /announcements.csv/) then 2 else 1 end

    if (@version == 1)
      @id = message_fields['id']
      @body = message_fields['body']
      @recipient = message_fields['to'].downcase
      @message_timestamp = parse_timestamp(message_fields['date'])
    elsif (@version == 2)
      @id = message_fields['announcement_id']
      @body = message_fields['body']

      if (match = /\/export_([^_]+)_\d{8}\//.match(path))
        @recipient = 'u/' + match[1].downcase
      else
        "unknown recipient in #{path}"
        @recipient =  '?'
      end
      @message_timestamp = parse_timestamp(message_fields['sent_at'])
    else
      puts "Unknown version #{@version}"
    end
  end


  def to_s
    "User #{reported_account()} was #{user_action()} because of #{violation_type()} in r/#{subreddit()} (#{timestamp_as_date(report_timestamp())} - #{timestamp_as_date(message_timestamp())})"
  end

end